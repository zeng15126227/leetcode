# ÁªôÂÆö‰∏Ä‰∏™ÊúâÁõ∏ÂêåÂÄºÁöÑ‰∫åÂèâÊêúÁ¥¢Ê†ëÔºàBSTÔºâÔºåÊâæÂá∫ BST ‰∏≠ÁöÑÊâÄÊúâ‰ºóÊï∞ÔºàÂá∫Áé∞È¢ëÁéáÊúÄÈ´òÁöÑÂÖÉÁ¥†Ôºâ„ÄÇ 
# 
#  ÂÅáÂÆö BST ÊúâÂ¶Ç‰∏ãÂÆö‰πâÔºö 
# 
#  
#  ÁªìÁÇπÂ∑¶Â≠êÊ†ë‰∏≠ÊâÄÂê´ÁªìÁÇπÁöÑÂÄºÂ∞è‰∫éÁ≠â‰∫éÂΩìÂâçÁªìÁÇπÁöÑÂÄº 
#  ÁªìÁÇπÂè≥Â≠êÊ†ë‰∏≠ÊâÄÂê´ÁªìÁÇπÁöÑÂÄºÂ§ß‰∫éÁ≠â‰∫éÂΩìÂâçÁªìÁÇπÁöÑÂÄº 
#  Â∑¶Â≠êÊ†ëÂíåÂè≥Â≠êÊ†ëÈÉΩÊòØ‰∫åÂèâÊêúÁ¥¢Ê†ë 
#  
# 
#  ‰æãÂ¶ÇÔºö 
# ÁªôÂÆö BST [1,null,2,2], 
# 
#     1
#     \
#      2
#     /
#    2
#  
# 
#  ËøîÂõû[2]. 
# 
#  ÊèêÁ§∫ÔºöÂ¶ÇÊûú‰ºóÊï∞Ë∂ÖËøá1‰∏™Ôºå‰∏çÈúÄËÄÉËôëËæìÂá∫È°∫Â∫è 
# 
#  ËøõÈò∂Ôºö‰Ω†ÂèØ‰ª•‰∏ç‰ΩøÁî®È¢ùÂ§ñÁöÑÁ©∫Èó¥ÂêóÔºüÔºàÂÅáËÆæÁî±ÈÄíÂΩí‰∫ßÁîüÁöÑÈöêÂºèË∞ÉÁî®Ê†àÁöÑÂºÄÈîÄ‰∏çË¢´ËÆ°ÁÆóÂú®ÂÜÖÔºâ 
#  Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ ‰∫åÂèâÊêúÁ¥¢Ê†ë ‰∫åÂèâÊ†ë 
#  üëç 341 üëé 0


# leetcode submit region begin(Prohibit modification and deletion)
# Definition for a binary tree node.
class TreeNode(object):
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
class Solution(object):
    def findMode(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        if not root:
            return []

        pre = None
        count=0
        max_count=0
        res=[]

        def dfs(root):
            nonlocal pre
            nonlocal count
            nonlocal max_count
            nonlocal res

            if not root:
                return
            #Â∑¶
            if root.left:
                dfs(root.left)
            #‰∏≠
            if not pre:  #Á¨¨‰∏Ä‰∏™ËäÇÁÇπ
                count=1
            elif pre.val==root.val:  #ÈÅçÂéÜÂà∞Áõ∏ÂêåÂÖÉÁ¥†
                count+=1
            else:   #ÈÅçÂéÜÂà∞‰∏çÂêåÂÖÉÁ¥†
                count=1
            #ÂØπÊúÄÂ§ßÂÄºÔºåÁªìÊûúÊï∞ÁªÑËøõË°åÊõ¥Êñ∞
            if count == max_count:
                res.append(root.val)
            elif count > max_count:
                res = [root.val]
                max_count = count
            pre = root

            #Âè≥
            if root.right:
                dfs(root.right)

        dfs(root)
        return res
# leetcode submit region end(Prohibit modification and deletion)
if __name__ == '__main__':
    root = TreeNode(1)
    b = TreeNode(2)
    root.right = b
    res = Solution().findMode(root)
    print(res)
